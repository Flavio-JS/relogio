@import url("https://fonts.googleapis.com/css2?family=Kdam+Thmor+Pro&display=swap");

:root {
  --clrBorder: #1e3f7b; /* cor das bordas e do botão padrão: #1e3f7b */
  --clrBackground: #212430; /* background modo DARK: #212430    modo LIGHT: #aeb6d8*/
  --clrBackgroundPreview: #aeb6d8; /* background modo DARK: #aeb6d8    modo LIGHT: #212430*/
  --letters: #fff; /* cor das letras modo DARK: #fff   modo LIGHT: #000*/
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Kdam Thmor Pro", sans-serif;
}

body {
  font-family: "Kdam Thmor Pro", sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: var(--clrBackground);
  transition: 0.5s;
}

.main-container {
  border: 5px solid var(--clrBorder);
  border-radius: 20px;
  height: auto;
  max-height: 100vh;
  max-width: 400px;
  width: 90vw;
}

.clock-container {
  display: flex;
  justify-content: center;
  align-items: center;
  max-height: 400px;
  padding: 15px;
  transition: 0.5s;
}

.clock {
  border: 2px solid var(--clrBorder);
  border-radius: 50%;
  height: 370px;
  width: 370px;
  position: relative;
}

.border-color-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border: 2px solid var(--clrBorder);
  border-radius: 15px;
  color: var(--letters);
  padding: 15px;
  transition: 0.5s;
  margin: 15px;
}

.border-color-container #color {
  border: none;
  padding: 0;
  background-color: var(--clrBackground);
  margin: 5px;
  margin-top: 2px;
  cursor: pointer;
}

.border-color-container button {
  cursor: pointer;
  border: none;
  font-size: 16px;
  color: var(--letters);
  background-color: var(--clrBackground);
}

/*posição dos números*/

.clock .number {
  position: absolute;
  width: 100%;
  height: 100%;
  text-align: center;
  color: var(--letters);
}

.clock .number-1 {
  transform: rotate(calc(30 * 1deg));
}
.clock .number-2 {
  transform: rotate(calc(30 * 2deg));
}
.clock .number-3 {
  transform: rotate(calc(30 * 3deg));
}
.clock .number-4 {
  transform: rotate(calc(30 * 4deg));
}
.clock .number-5 {
  transform: rotate(calc(30 * 5deg));
}
.clock .number-6 {
  transform: rotate(calc(30 * 6deg));
}
.clock .number-7 {
  transform: rotate(calc(30 * 7deg));
}
.clock .number-8 {
  transform: rotate(calc(30 * 8deg));
}
.clock .number-9 {
  transform: rotate(calc(30 * 9deg));
}
.clock .number-10 {
  transform: rotate(calc(30 * 10deg));
}
.clock .number-11 {
  transform: rotate(calc(30 * 11deg));
}

/*ponteiros*/

.clock .hand {
  position: absolute;
  bottom: 50%;
  left: 50%;
  width: 3px;
  background-color: black;
  transform-origin: bottom;
  border-top-left-radius: 15px;
  border-top-right-radius: 15px;
}

.clock .hand.seconds {
  --rotation: 0;
  height: 40%;
  background-color: red;
  transform: translateX(-50%) rotate(calc(var(--rotation) * 1deg));
  z-index: 1;
}

.clock .hand.minutes {
  --rotation: 0;
  height: 35%;
  background-color: green;
  transform: translateX(-50%) rotate(calc(var(--rotation) * 1deg));
  z-index: 2;
}

.clock .hand.hours {
  --rotation: 0;
  height: 30%;
  transform: translateX(-50%) rotate(calc(var(--rotation) * 1deg));
  z-index: 2;
}

/*Digital clock*/

.digital-clock-container {
  display: flex;
  justify-content: center;
  align-items: center;
  max-height: 130px;
  height: auto;
  padding: 15px;
  transition: 0.5s;
}

.digital-clock {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 20px;
  border: 2px solid var(--clrBorder);
  border-radius: 15px;
  max-height: 100px;
  height: auto;
  width: 370px;
  color: var(--letters);
}

/* Estilização do botão que altera o layout de LIGHT e DARK*/

.button-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 95px;
}

a {
  position: relative; /* 
                        position relative é usada quando queremos alterar a
                        posição de um elemento tendo como referência a posição 
                        inicial dele */
  background: var(--clrBorder); /* cor do background */
  color: var(--letters); /* cor do texto */
  text-decoration: none; /* retira a decoração do texto */
  text-transform: uppercase; /* transforma o todo o texto em caixa alta */
  font-size: 1.5em; /* tamanho da fonte */
  letter-spacing: 0.1em; /* espaçamento entre as letras */
  padding: 10px 30px;
  transition: 0.5s; /* 0.5s para o elemento aparecer */
}
a:hover /* :hover ao passar o mouse em cima aplica as  propriedades abaixo */ {
  cursor: pointer;
  letter-spacing: 0.25em;
  background: var(--clrBorder); /* cor do backgroud */
  color: var(--clrBorder); /* cor do texto */
  box-shadow: 0 0 35px var(--clrBorder); /* 
                                     efeito de sombra sem deslocamento e com
                                     sombra de  35px com a cor da variável */
}
a::before /* 
            ::before cria um pseudo-elemento que é o primeiro filho do elemento
            atingido, utilizado no exemplo com a propriedade ‘inset’ para o
            background interno ser o mesmo do background de fundo*/ {
  content: ""; /* 
                 content: é utilizado para gerar conteúdo em um elemento, como no
                 exemplo não queremos nenhum conteúdo e sim apenas o pseudo-elemento  
                       colocamos ele vazio*/
  position: absolute; /* 
                utilizado para posicionar o elemento de acordo com o
                        elemento pai (o elemento pai com position diferente de
                static) */
  inset: 2px; /* 
                faz com que o pseudo-elemento mude a sombra para dentro do
                elemento pai (como se o conteúdo estivesse pressionado 2px dentro da
                caixa)*/
  background: var(
    --clrBackground
  ); /* 
                           mesmo background de fundo para causar um efeito de 
                           “transparência” */
}
a span {
  position: relative; /* 
                        position relative é usada quando queremos alterar a
                        posição de um elemento tendo como referência a posição 
                        inicial dele */
  z-index: 1; /* 
                responsável pelo cálculo e posicionamento da profundidade de 
                algum elemento, ou seja, é aquele que irá determinar se o elemento 
                estará mais próximo ou mais afastado da tela */
}
a i {
  position: absolute; /* 
                        utilizado para posicionar o elemento de acordo com o
                                elemento pai (o elemento pai com position diferente de
                        static) */
  inset: 0; /* 
              faz com que o pseudo-elemento mude a sombra para dentro do
              elemento pai (nesse caso faz com que o elemento fique em cima do 
              elemento pai)*/
  display: block; /* faz com que o elemento seja renderizado como bloco */
}
a i::before /* 
              ::before cria um pseudo-elemento que é o primeiro filho do elemento
              atingido, utilizado no exemplo para criar a pequena caixa que percorre 
                  a borda superior do botão */ {
  content: "";
  position: absolute;
  top: -3.5px; /* 
                 posiciona o pequeno bloco no meio da borda do botão, já que o 
                       mesmo tem 9px de altura (5px de altura + 4px da borda) -2px da  
                       borda do botão sobra 7px, dividimos por 2 = 3.5px, colocamos 
                       negativo para que suba */
  left: 80%; /* 
               faz com que a posição inicial comece na esquerda e seja 80% da 
                   largura disponível */
  width: 10px;
  height: 5px;
  border: 2px solid var(--clrBorder);
  background: var(--clrBackground);
  transform: translateX(-50%);
  transition: 0.5s;
}
a:hover i::before {
  background: var(--clrBackgroundPreview);
  width: 20px;
  left: 20%;
}
a i::after /* 
             ::after cria um pseudo-elemento que é o segundo filho do elemento
             atingido, utilizado no exemplo para criar a pequena caixa que percorre 
                 a borda inferior do botão, as propriedades são as mesma pequena caixa 
                 superior porém com o posição inicial e final trocadas */ {
  content: "";
  position: absolute;
  bottom: -3.5px;
  left: 20%;
  width: 10px;
  height: 5px;
  border: 2px solid var(--clrBorder);
  background: var(--clrBackground);
  transform: translateX(-50%);
  transition: 0.5s;
}
a:hover i::after {
  background: var(--clrBackgroundPreview);
  width: 20px;
  left: 80%;
}

@media (max-width: 500px) {
  .clock-container {
    max-height: 200px;
    transition: 0.5s;
  }

  .clock {
    height: 180px;
    width: 180px;
    transition: 0.5s;
  }
}

@media (max-height: 780px) {
  .clock-container {
    max-height: 200px;
    transition: 0.5s;
  }

  .clock {
    height: 180px;
    width: 180px;
    transition: 0.5s;
  }
}

@media (max-height: 600px) {
  .clock-container {
    padding: 0px;
  }

  .clock {
    transition: 0.5s;
    border: 0px solid transparent;
    height: 0px;
    width: 0px;
  }

  .number,
  .hand {
    display: none;
  }
}
